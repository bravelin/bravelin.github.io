import{_ as a,m as o,o as s,p as u,e as l,q as n,h as r}from"./index-ChNXl_Yx.js";const p={};function i(c,t){const e=r("MyArticle");return s(),o(e,{title:"Canvas学习笔记之一：基础知识",date:"2016年06月08日"},{default:u(()=>t[0]||(t[0]=[l("div",{class:"_article-content readingNotes-canvas-01"},[l("h3",{class:"title"},"Canvas元素"),l("p",null,"在设置Canvas的宽度与高度属性时，不能使用px后缀，并且只能是非负整数。"),l("p",null,"默认情况下，浏览器创建的Canvas元素是300*150的尺寸。Canvas元素有两套尺寸，一是元素本身的大小；二是元素绘图表面的大小。"),l("p",null,"通过设置属性width和height时，实际上同时修改了该元素本身的大小和绘图表面的大小；如果通过CSS设定Canvas元素的大小，那么只会改变元素本身的大小，而不会影响到绘图表面，此时浏览器会对绘图表面进行缩放，使其符合元素的大小。"),l("p",null,"Canvas元素提供如下3个方法："),l("p",null,[l("strong",null,"1、getContext()"),n("：返回与该canvas元素相关的绘图环境对象；")]),l("p",null,[l("strong",null,"2、toDataURL(type, quality)"),n("：返回一个数据地址（图片的base64编码），type默认为image/png，第二个参数是0~1.0之间的数值，表示JPEG图片的质量（当type为image/jpeg）。")]),l("p",null,[l("strong",null,"3、toBlob(callback, type, args...)"),n("：创建一个表示此canvas元素图像文件的Blob，type为image/png或者image/jpeg，第3个参数如同toDataURL中的quality（写成args...是可能会扩展）。")]),l("h3",{class:"title"},"绘图环境"),l("p",null,"2D绘图环境通常指CanvasRenderingContent2D对象，此对象的属性如下："),l("p",null,[l("strong",null,"1、canvas"),n("：指向绘图环境所属的canvas对象，常见用途是用来获取canvas的宽度与高度，分别调用context.canvas.width与context.canvas.height。")]),l("p",null,[l("strong",null,"2、fillstyle"),n("：设定绘图环境在后续图形填充操作中所使用的颜色、渐变色和图案。")]),l("p",null,[l("strong",null,"3、font"),n("：在调用绘图环境对象的fillText()或者strokeText()方法时，使用的字型。")]),l("p",null,[l("strong",null,"4、globalAlpha"),n("：全局透明度设定，0~1.0之间的值。浏览器会将每个像素的alpha值与之相乘。")]),l("p",null,[l("strong",null,"5、globalCompsiteOperation："),n("设定将某个物体绘制在其他物体之上时的绘制方式。")]),l("p",null,[l("strong",null,"6、lineCap"),n("：设置绘制线段端点的方式。")]),l("p",null,[l("strong",null,"7、lineWidth"),n("：设置绘制线段的屏幕像素的宽度，默认值1.0。")]),l("p",null,[l("strong",null,"8、lineJoin"),n("：设定两条线段相交时如何绘制焦点，可取的值：bevel、round、miter（默认值）。")]),l("p",null,[l("strong",null,"9、miterLimit"),n("：设定如何绘制miter形式的焦点。")]),l("p",null,[l("strong",null,"10、strokeStyle"),n("：设定对路径进行描边的风格，可以是某个颜色值、渐变色或者图案。")]),l("p",null,[l("strong",null,"11、textAlign"),n("：设定文本的水平对齐方式。")]),l("p",null,[l("strong",null,"11、textBaseline"),n("：设定文本的垂直对齐方式。")]),l("p",null,"阴影相关的属性："),l("p",null,[l("strong",null,"12、shadowBlur"),n("：设定阴影的延伸效果，值越高，阴影延伸的越远，默认值为0。")]),l("p",null,[l("strong",null,"13、shadowColor"),n("：设定阴影的颜色。通常使用半透明色。")]),l("p",null,[l("strong",null,"14、shadowOffsetX"),n("：阴影效果的水平方向偏移量。")]),l("p",null,[l("strong",null,"15、shadowOffsetY"),n("：阴影效果的垂直方向偏移量。")]),l("p",null,"save()和restore()是绘图环境对象中与状态操作的两个方法。"),l("p",null,"鼠标坐标转为Canvas坐标，使用如下方法"),l("pre",null,[l("code",null,`function windowToCanvas (canvas, x ,y) {
    var box = canvas.getBoundingClientRect()
    return { x: (x - box.left) * (canvas.width / box.width), y: (y - box.top) * (canvas.height / box.height) }
}`)]),l("p",null,[l("strong",null,"Canvas常用的是“立即模式”（immediate-mode）来绘制图形的，它会立即将所指定的内容绘制在canvas上，然后忘记刚才绘制的内容。“保留模式”（retained-mode）会维护一份所绘图形对象的列表。")]),l("h3",{class:"title"},"基础数学知识"),l("p",null,[n("弧度与角度的转换："),l("strong",null,"π = 180度   1弧度 = (180 / π) 度    1度 = (π / 180) 弧度")]),l("p",null,"二维向量含有两个值：方向和大小。{ x: x, y: y }，向量的大小通过勾股定理（毕达哥拉斯定理）计算出来："),l("pre",null,[l("code",null,"var magnitude = Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2))")]),l("p",null,"单位向量是长度为1的向量，通常用来指示方向："),l("pre",null,[l("code",null,`var magnitude = Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2))
var unitVector = new Vector()
uniteVector.x = vector.x / magnitude
uniteVector.y = vector.y / magnitude`)]),l("p",null,"向量的加减即将两个向量对应的x和y相加减即可。"),l("p",null,[l("strong",null,"向量的点积"),n("是将两个向量的对应分量相乘然后再相加：v1.x * v2.x + v1.y * v2.y。当点积大于0，意味着两个向量大致处在同一个方向上。")]),l("p",null,[l("strong",null,"动画的移动应该以时间为基准的（time-bases motion）。"),n("帧速率是每帧持续的时间（frame rate，毫秒）。如果设定了物体的移动速度（每秒移动多少像素），可以求得每帧移动的像素数：")]),l("p",null,[l("strong",null,"像素/帧 = （X * Y）/ 1000"),n("  （X：用毫秒/帧表示的帧速率，Y：用像素/秒表示的速度）")])],-1)])),_:1})}const v=a(p,[["render",i]]);export{v as default};
