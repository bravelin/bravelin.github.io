webpackJsonp([22],{Jocv:function(e,n,v){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t={extends:v("3ErM").a},r={render:function(){var e=this,n=e.$createElement,v=e._self._c||n;return v("div",{staticClass:"page article"},[v("h2",{staticClass:"title"},[e._v("你不知道的JavaScript（中卷）笔记")]),e._v(" "),e._m(0),e._v(" "),v("footer",[e._v("2018年06月05日")]),e._v(" "),v("Comments"),e._v(" "),v("Catalog",{attrs:{catalog:e.catalog}})],1)},staticRenderFns:[function(){var e=this,n=e.$createElement,v=e._self._c||n;return v("div",{staticClass:"content"},[v("h3",{staticClass:"title"},[e._v("类型")]),e._v(" "),v("p",[v("strong",[e._v("对语言引擎和开发人员来说，类型是值的内部特征，它定义了值的行为，以使其区别于其他值。")])]),e._v(" "),v("p",[e._v("JavaScript不要求“类型强制”，也就是说，语言引擎不要求变量总是持有与其初始值同类型的值。")]),e._v(" "),v("p",[e._v("转换类数组对象：Array.prototype.slice.call(obj)，或者Array.from(obj)")]),e._v(" "),v("p",[e._v("JS中的整数就是没有小数的十进制数，42.0即等同于整数42.")]),e._v(" "),v("p",[e._v("JS中的机器精度大约是2^-52，该值定义在Number.EPSILON.")]),e._v(" "),v("p",[e._v("整数检测：Number.isInteger：")]),e._v(" "),v("pre",[v("code",[e._v("if (!Number.isInteger) {\n    Number.isInteger = function (num) {\n        return typeof num == 'number' && num % 1 == 0\n    }\n}")])]),e._v(" "),v("p",[v("strong",[e._v("void运算符")]),e._v("：void不改变表达式的结果，只是让表达式返回undefined.")]),e._v(" "),v("pre",[v("code",[e._v("var a = 42\nconsole.log(void a, a) // undefined 42")])]),e._v(" "),v("p",[v("strong",[e._v("NaN是JS中唯一一个不等于自身的值。")])]),e._v(" "),v("p",[e._v("Function.prototype是一个空函数，Array.prototype是一个空数组，RegExp.prototype是一个空的正则表达式。")]),e._v(" "),v("h3",{staticClass:"title"},[e._v("强制类型转换")]),e._v(" "),v("p",[v("strong",[e._v("JS中的强制类型转换总是返回标量基本类型值，如string、number、boolean。类型转换发生在静态类型语言的编译阶段，而强制类型转换则发生在动态类型语言的运行时（runtime）。")])]),e._v(" "),v("p",[v("em",[e._v("1、toString")])]),e._v(" "),v("p",[e._v("字符串化规则为：null转化为'null'；undefined转化为'undefined'；true转化为'true'；false转化为'false'；数字的字符串化遵循通用规则，极大和极小的数字使用指数的形式；")]),e._v(" "),v("pre",[v("code",[e._v("var a = 1.07 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000;\nconsole.log(a + '') // 1.07e+21")])]),e._v(" "),v("p",[e._v("对于对象来说，除非自定义，否则返回toString返回内部属性的值；数组的toString则是将单元字符串化以后再用逗号连接起来：")]),e._v(" "),v("pre",[v("code",[e._v("var a = [1,2,3]\nconsole.log(a + '') // 1,2,3")])]),e._v(" "),v("p",[e._v("JSON.stringify在将JSON对象序列化为字符串时也使用到了toString。所有安全的JSON值都是可以字符串化的。")]),e._v(" "),v("p",[v("strong",[e._v("不安全的JSON值指的是undefined、function、symbol和包含循环引用的对象。")]),e._v("JSON.stringify在对象中遇到undefined、function、symbol时会自动将其忽略，在数组中则会返回null；如果对象中包含循环引用，则报错。")]),e._v(" "),v("p",[e._v("如果对象中定义了toJSON方法，JSON字符串化时会首先调用此方法。然后用它的返回值进行序列化。")]),e._v(" "),v("pre",[v("code",[e._v("var a = { val: [1,2,3], toJSON: function () { return this.val.slice(1) } }\nJSON.stringify(a) // [2,3]")])]),e._v(" "),v("p",[v("em",[e._v("2、toNumber")])]),e._v(" "),v("p",[e._v("true转为1；false转为0；null转为0；undefined转为NaN。")]),e._v(" "),v("p",[e._v("对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。会尝试调用valueOf方法，再次toString方法。")]),e._v(" "),v("pre",[v("code",[e._v("var a = { valueOf: function() { return '42' }}\nNumber(a) // 42\nNumber('') // 0\nNumber([]) // 0\nNumber([1,2]) // NaN")])]),e._v(" "),v("p",[v("em",[e._v("3、toBoolean")])]),e._v(" "),v("p",[v("strong",[e._v("以下这些是假值：undefined、null、''、false、+0、-0、NaN；假值以外的值都是真值。")])]),e._v(" "),v("p",[v("strong",[e._v("~~x能将值截除为一个32位整数，x|0也可以：")])]),e._v(" "),v("pre",[v("code",[e._v("~~32.11 // 32\n32.11 | 0 // 32")])]),e._v(" "),v("p",[e._v("隐式强制类型转换的作用是减少冗余，让代码更简洁。")]),e._v(" "),v("p",[v("strong",[e._v("||和&&返回它们其中一个操作数的值。")])]),e._v(" "),v("p",[v("em",[e._v("抽象相等：")])]),e._v(" "),v("p",[e._v("1、字符串与数字之间的相等比较：字符串会被转化成数字再进行比较。")]),e._v(" "),v("pre",[v("code",[e._v("var a = 42\nvar b = '42'\na === b // false\na == b // true")])]),e._v(" "),v("p",[e._v("2、其他类型与布尔类型的比较：布尔类型先转成数值再与对方进行比较。")]),e._v(" "),v("pre",[v("code",[e._v("'42' == true // false，相当于比较：42 == 1\n'42' == false // false，相当于比较：42 == 0")])]),e._v(" "),v("p",[v("strong",[e._v("无论什么情况下都不要使用==true和==false.")])]),e._v(" "),v("p",[e._v("3、null == undefined为true。null和undefined没有对应的封装对象：")]),e._v(" "),v("pre",[v("code",[e._v("var a = 'abc'\nvar b = Object(a)\na == b // true\n\nvar c = undefined\nvar d = Object(c)\nc == d // false\n\nvar e = null\nvar f = Object(f)\ne == f // false")])]),e._v(" "),v("p",[v("strong",[e._v("&&运算符的优先级高于||，||运算符的优先级高于? :")])])])}]},_=v("Z0/y")(t,r,!1,null,null,null);n.default=_.exports}});