webpackJsonp([10,42],{1:function(t,n){"use strict";t.exports={mounted:function(){this.$nextTick(function(){var t=document.querySelectorAll("code");if(t.length>0)for(var n=0;n<t.length;n++)hljs.highlightBlock(t[n])})}}},2:function(t,n,e){var o,r;o=e(1);var s=e(3);r=o=o||{},"object"!=typeof o.default&&"function"!=typeof o.default||(r=o=o.default),"function"==typeof r&&(r=r.options),r.render=s.render,r.staticRenderFns=s.staticRenderFns,t.exports=o},3:function(t,n){t.exports={render:function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div")},staticRenderFns:[]}},44:function(t,n,e){"use strict";function o(t){return t&&t.__esModule?t:{default:t}}var r=e(2),s=o(r);t.exports={extends:s.default}},106:function(t,n,e){var o,r;o=e(44);var s=e(139);r=o=o||{},"object"!=typeof o.default&&"function"!=typeof o.default||(r=o=o.default),"function"==typeof r&&(r=r.options),r.render=s.render,r.staticRenderFns=s.staticRenderFns,t.exports=o},139:function(t,n){t.exports={render:function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"page article"},[e("h2",{staticClass:"title"},[t._v("React学习笔记之二：漫谈React")]),t._v(" "),t._m(0),t._v(" "),e("footer",[t._v("2017年11月05日")]),t._v(" "),e("comments")],1)},staticRenderFns:[function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"content"},[e("h3",{staticClass:"title"},[t._v("事件系统")]),t._v(" "),e("p",[t._v("Virtual DOM在内存中以对象的形式存在，React实现了一个"),e("strong",[t._v("SyntheticEvent")]),t._v("层。所有的事件都自动绑定到最外层上，如果需要访问原生事件对象，可以使用"),e("strong",[t._v("nativeEvent")]),t._v("属性。")]),t._v(" "),e("p",[t._v("在JSX中，必须以驼峰形式来书写事件的属性名：")]),t._v(" "),e("pre",[e("code",[t._v("<button onClick={this.handClick}>Test</button>")])]),t._v(" "),e("p",[t._v("React并不会像DOM0级事件那样将事件处理器直接绑定到HTML元素之上。"),e("strong",[t._v("而是将所有事件绑定到结构的最外层，使用一个统一的事件监听器。")]),t._v("这个事件监听器维持了一个映射来保存所有组件内的事件监听和处理函数。")]),t._v(" "),e("p",[t._v("在React组件中，每个方法的上下文都会指向该组件的实例，"),e("strong",[t._v("即自动绑定this为当前组件。")]),t._v("在使用ES6 classes或者纯函数时，这种自动绑定就不复存在了，需要"),e("strong",[t._v("手动绑定")]),t._v("：")]),t._v(" "),e("p",[e("strong",[t._v("1、bind方法：")])]),t._v(" "),e("pre",[e("code",[t._v("import React, { Component } from 'react'\nclass App extends Component {\n    handClick(e, arg) {\n        console.log(e, arg)\n    }\n    render() {\n        return <button onClick={ this.handClick.bind(this, 'test') }>Test</button>\n    }\n}")])]),t._v(" "),e("p",[t._v("如果方法只绑定而不传参，可以使用"),e("strong",[t._v("双冒号语法")]),t._v("：")]),t._v(" "),e("pre",[e("code",[t._v("<button onClick={ ::this.handClick }>Test</button>")])]),t._v(" "),e("p",[e("strong",[t._v("2、在constructor中声明绑定：")])]),t._v(" "),e("pre",[e("code",[t._v("import React, { Component } from 'react'\nclass App extends Component {\n    constructor (props) {\n        super(props)\n        this.handClick = this.handClick.bind(this)\n    }\n    handClick(e, arg) {\n        console.log(e, arg)\n    }\n    render() {\n        return <button onClick={ this.handClick }>Test</button>\n    }\n}")])]),t._v(" "),e("p",[e("strong",[t._v("3、箭头函数：")]),t._v("箭头函数自动绑定了定义此函数作用域的this，因此不必再对其使用bind方法：")]),t._v(" "),e("pre",[e("code",[t._v("import React, { Component } from 'react'\nclass App extends Component {\n    const handClick = (e) => {\n        console.log(e, arg)\n    }\n    render() {\n        return <button onClick={ this.handClick }>Test</button>\n    }\n}")])])])}]}}});