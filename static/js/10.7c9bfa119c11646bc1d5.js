webpackJsonp([10,42],{1:function(t,e){"use strict";t.exports={mounted:function(){this.$nextTick(function(){var t=document.querySelectorAll("code");if(t.length>0)for(var e=0;e<t.length;e++)hljs.highlightBlock(t[e])})}}},2:function(t,e,n){var a,s;a=n(1);var r=n(3);s=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(s=a=a.default),"function"==typeof s&&(s=s.options),s.render=r.render,s.staticRenderFns=r.staticRenderFns,t.exports=a},3:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div")},staticRenderFns:[]}},44:function(t,e,n){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}var s=n(2),r=a(s);t.exports={extends:r.default}},106:function(t,e,n){var a,s;a=n(44);var r=n(139);s=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(s=a=a.default),"function"==typeof s&&(s=s.options),s.render=r.render,s.staticRenderFns=r.staticRenderFns,t.exports=a},139:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"page article"},[n("h2",{staticClass:"title"},[t._v("React学习笔记之二：漫谈React")]),t._v(" "),t._m(0),t._v(" "),n("footer",[t._v("2017年11月05日")]),t._v(" "),n("comments")],1)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("h3",{staticClass:"title"},[t._v("事件系统")]),t._v(" "),n("p",[t._v("Virtual DOM在内存中以对象的形式存在，React实现了一个"),n("strong",[t._v("SyntheticEvent")]),t._v("层。所有的事件都自动绑定到最外层上，如果需要访问原生事件对象，可以使用"),n("strong",[t._v("nativeEvent")]),t._v("属性。")]),t._v(" "),n("p",[t._v("在JSX中，必须以驼峰形式来书写事件的属性名：")]),t._v(" "),n("pre",[n("code",[t._v("<button onClick={this.handClick}>Test</button>")])]),t._v(" "),n("p",[t._v("React并不会像DOM0级事件那样将事件处理器直接绑定到HTML元素之上。"),n("strong",[t._v("而是将所有事件绑定到结构的最外层，使用一个统一的事件监听器。")]),t._v("这个事件监听器维持了一个映射来保存所有组件内的事件监听和处理函数。")]),t._v(" "),n("p",[t._v("在React组件中，每个方法的上下文都会指向该组件的实例，"),n("strong",[t._v("即自动绑定this为当前组件。")]),t._v("在使用ES6 classes或者纯函数时，这种自动绑定就不复存在了，需要"),n("strong",[t._v("手动绑定")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("1、bind方法：")])]),t._v(" "),n("pre",[n("code",[t._v("import React, { Component } from 'react'\n    class App extends Component {\n        handClick(e, arg) {\n            console.log(e, arg)\n        }\n        render() {\n            return <button onClick={ this.handClick.bind(this, 'test') }>Test</button>\n        }\n    }")])]),t._v(" "),n("p",[t._v("如果方法只绑定而不传参，可以使用"),n("strong",[t._v("双冒号语法")]),t._v("：")]),t._v(" "),n("pre",[n("code",[t._v("<button onClick={ ::this.handClick }>Test</button>")])]),t._v(" "),n("p",[n("strong",[t._v("2、在constructor中声明绑定：")])]),t._v(" "),n("pre",[n("code",[t._v("import React, { Component } from 'react'\n    class App extends Component {\n        constructor (props) {\n            super(props)\n            this.handClick = this.handClick.bind(this)\n        }\n        handClick(e, arg) {\n            console.log(e, arg)\n        }\n        render() {\n            return <button onClick={ this.handClick }>Test</button>\n        }\n    }")])]),t._v(" "),n("p",[n("strong",[t._v("3、箭头函数：")]),t._v("箭头函数自动绑定了定义此函数作用域的this，因此不必再对其使用bind方法：")]),t._v(" "),n("pre",[n("code",[t._v("import React, { Component } from 'react'\n    class App extends Component {\n        const handClick = (e) => {\n            console.log(e, arg)\n        }\n        render() {\n            return <button onClick={ this.handClick }>Test</button>\n        }\n    }")])]),t._v(" "),n("p",[t._v("在React中使用DOM原生事件时，"),n("strong",[t._v("一定要在组件卸载时手动移除，否则很可能出现内存泄漏的问题。尽量避免在React中混用合成事件和原生DOM事件。")])]),t._v(" "),n("p",[t._v("React的合成事件只是原生DOM事件系统的一个子集，"),n("strong",[t._v("并没有实现事件捕获，仅仅支持事件冒泡机制。")])]),t._v(" "),n("h3",{staticClass:"title"},[t._v("表单")]),t._v(" "),n("p",[t._v("文本框的应用：")]),t._v(" "),n("pre",[n("code",[t._v("import React, { Component } from 'react'\n    class App extends Component {\n        constructor (props) {\n            super(props)\n            this.handleInputChange = this.handleInputChange.bind(this)\n            this.handleTextareaChange = this.handleTextareaChange.bind(this)\n            this.state = {\n                inputValue: '',\n                textareaValue: ''\n            }\n        }\n        handleInputChange (e) { // 同步值\n            this.setState({\n                inputValue: e.target.value\n            })\n        }\n        handleTextareaChange (e) {\n            this.setState({\n                textareaValue: e.target.value\n            })\n        }\n        render () {\n            const { inputValue, textareaValue } = this.state\n            return (\n                <div>\n                    <input type=\"text\" value={ inputValue } onChange={ this.handleInputChange }/>\n                    <textarea value={ textareaValue } onChange={ this.handleTextareaChange }/>\n                </div>\n            )\n        }\n    }")])]),t._v(" "),n("p",[t._v("每当表单的状态发生改变时，都会将表单对应的值写入到state中，这种组件称之为"),n("strong",[t._v("受控组件")]),t._v("。在受控组件中，组件渲染出的状态与它的value或checked属性相对应。受控组件更新state的流程：")]),t._v(" "),n("p",[t._v("1、可以在初始state中设置表单的默认值；")]),t._v(" "),n("p",[t._v("2、对表单增加onChange事件监听；")]),t._v(" "),n("p",[t._v("3、事件处理器通过合成事件e拿到改变之后的状态，并更新应用的state；")]),t._v(" "),n("p",[t._v("4、setState触发视图的重新渲染，完成表单组件的更新。")]),t._v(" "),n("p",[t._v("可以在执行最后一步的setState之前，对表单值进行清洗和校验：")]),t._v(" "),n("pre",[n("code",[t._v("handleChange (e) {\n    this.setState({\n        value: e.target.value.substring(0, 10).toUpperCase()\n    })\n}")])]),t._v(" "),n("p",[t._v("如果一个表单组件没有value（checked）props，可称之为"),n("strong",[t._v("非受控组件")]),t._v("。因为其值不受state或者props控制，通常需要为其添加ref prop来访问渲染之后的DOM元素。在React中不提倡使用非受控组件。")]),t._v(" "),n("p",[t._v("表单组件的三个状态属性：")]),t._v(" "),n("p",[n("strong",[t._v("value")]),t._v("：type为text的input、textarea、select组件；")]),t._v(" "),n("p",[n("strong",[t._v("checked")]),t._v("：type为radio或者checkbox的组件；")]),t._v(" "),n("p",[n("strong",[t._v("selected")]),t._v("：作用于select组件下的option，React并不建议使用这种方式定义select组件的状态。")]),t._v(" "),n("h3",{staticClass:"title"},[t._v("样式处理")])])}]}}});