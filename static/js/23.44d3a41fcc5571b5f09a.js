webpackJsonp([23],{j1zd:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var v={extends:t("3ErM").a},o={render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"page article"},[t("h2",{staticClass:"title"},[n._v("你不知道的JavaScript（下卷）笔记")]),n._v(" "),n._m(0),n._v(" "),t("footer",[n._v("2018年06月09日")]),n._v(" "),t("Comments"),n._v(" "),t("Catalog",{attrs:{catalog:n.catalog}})],1)},staticRenderFns:[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content"},[t("p",[n._v("下册主要讲解的是一些基础概念及ES6语法，个人以为应该放到这部书系列的第一本来读比较好。")]),n._v(" "),t("h3",{staticClass:"title"},[n._v("基础")]),n._v(" "),t("p",[n._v("基本上可以说JavaScript是"),t("strong",[n._v("解释型")]),n._v("语言，因为每次执行JavaScript源码都需要进行处理。当JS引擎其实是"),t("strong",[n._v("动态编译")]),n._v("程序的，然后立即执行编译之后的代码。")]),n._v(" "),t("p",[n._v("变量的主要用途是"),t("strong",[n._v("管理程序的状态")]),n._v("。")]),n._v(" "),t("p",[t("strong",[n._v("作用域")]),n._v("基本上是变量的一个集合以及如何通过名称访问这些变量的规则。")]),n._v(" "),t("p",[n._v("七种类型："),t("strong",[n._v("number、boolean、string、null、undefined、object、symbol")]),n._v("，其中需要注意typeof null返回object，typeof数组返回object，typeof一个函数返回function，虽然函数是object的子类型。")]),n._v(" "),t("p",[n._v("JS中的假值有："),t("strong",[n._v("''、0、-0、NaN、null、undefined、false。")])]),n._v(" "),t("p",[t("strong",[n._v("==检查的是允许类型转换情况下的值的相等性；===则是不允许类型转换下的值的相等性。")])]),n._v(" "),t("p",[n._v("如果试图在一个作用域中访问一个不可访问的变量，则会抛出ReferenceError，如果试图给未声明的变量赋值，"),t("strong",[n._v("非严格模式情况下，会在顶层全局作用域创建这个变量。")])]),n._v(" "),t("p",[t("strong",[n._v("严格模式使代码保持在一个更安全、更适当的规范集合之内。")])]),n._v(" "),t("p",[t("strong",[n._v("IIFE")]),n._v("，立即调用函数表达式。会创建新的变量作用域。")]),n._v(" "),t("p",[t("strong",[n._v("闭包")]),n._v("可以看做“记忆”并在函数运行完毕之后可以继续访问函数作用域的一种方法。")]),n._v(" "),t("p",[t("strong",[n._v("函数中的this需要根据函数如何被调用来确定，并不指向函数本身。")])]),n._v(" "),t("p",[n._v("当引用某个对象的属性时，如果这个属性不存在，那么JS会自动使用对象的内部原型引用找到另外一个对象来寻找这个属性。从一个对象到其后备对象的内部原型引用的链接是在创建对象的时候发生的。可以使用"),t("strong",[n._v("Object.create()")]),n._v("方法在创建对象时指定原型对象：")]),n._v(" "),t("pre",[t("code",[n._v("var foo = { a: 42 }\nvar bar = Object.create(foo)\nbar.b = 12\nconsole.log(bar.a) // 42")])]),n._v(" "),t("p",[t("strong",[n._v("polyfilling")]),n._v("用于表示根据新特性的定义，创建一段与之行为等价但能够在旧的JS环境中运行的代码。")]),n._v(" "),t("p",[n._v("Object.is的polyfilling：")]),n._v(" "),t("pre",[t("code",[n._v("if (!Object.is) {\n    Object.is = function (v1, v2) {\n        // 检查 0 与 -0\n        if (v1 === 0 && v2 === 0) {\n            return 1/v1 === 1/v2\n        }\n        // 检查NaN\n        if (v1 !=== v1) {\n            return v2 !=== v2\n        }\n        // 其他情况下的判断\n        return v1 === v2\n    }\n}")])]),n._v(" "),t("h3",{staticClass:"title"},[n._v("ES6及更新版本")]),n._v(" "),t("p",[n._v("ES6的特性："),t("strong",[n._v("解构、默认参数值、块作用域、Symbol、简洁方法、计算属性、箭头函数、promise、生成器、迭代器、module、代理、WeakMap...")])]),n._v(" "),t("p",[t("strong",[n._v("暂时性死区（TDZ）")]),n._v("：在代码块内，使用let、const命令声明变量之前，该变量都是不可用的。")]),n._v(" "),t("pre",[t("code",[n._v("var t = 123\nif (true) {\n    console.log(t) // ReferenceError，在声明之前访问变量，if块里面是变量t的作用域，虽然声明了，但还处于死区之内\n    let t\n}")])]),n._v(" "),t("p",[n._v("const声明必须要有显示的初始化值。常量不是对值本身的限制，而是对赋值的那个变量的限制。如果那个值是复杂值，其内容是可以修改的，比如对象或者数组。")]),n._v(" "),t("p",[n._v("新运算符...，通常称为spread或rest(展开或收集)，取决于它如何使用。")]),n._v(" "),t("p",[n._v("undefined会触发函数参数的默认赋值。函数参数默认值可以是任意合法的表达式，甚至是函数调用。")]),n._v(" "),t("p",[t("strong",[n._v("函数声明中形式参数是在他们自己的作用域中，而不是在函数体作用域中。")])]),n._v(" "),t("pre",[t("code",[n._v("var w = 1, z = 2;\nfunction foo(x = w + 1, y = x + 1, z = z + 1) { // z=z+1 报错\n    console.log(x,y,z)\n}")])]),n._v(" "),t("p",[n._v("解构是一个"),t("strong",[n._v("结构化赋值")]),n._v("方法。对象或者数组解构的赋值表达式的完成值是所有右侧对象/数组的值。")]),n._v(" "),t("p",[n._v("一种利用解构默认值为类或者组件组合config的方法：")]),n._v(" "),t("pre",[t("code",[n._v("// 把default合并进config\n{\n    let {\n        options: {\n            remove = defaults.options.remove,\n            enable = defaults.options.enable,\n            instance = defaults.options.instance\n        } = {},\n        log: {\n            warn = defaults.log.warn,\n            error = defaults.log.error\n        } = {}\n    } = config;\n    // 重新组合\n    config = {\n        options: { remove, enable, instance },\n        log: { warn, error }\n    }\n}")])]),n._v(" "),t("p",[t("strong",[n._v("super只允许在简洁方法中出现，而不允许在普通函数表达式属性中出现，也只允许以spuer.xxx的形式存在，不能以spuer()的形式出现。")])]),n._v(" "),t("p",[n._v("在插入字符串字面量的${...}内可以出现任何合法的表达式，包括函数调用、在线函数表达式、甚至其他插入字符串字面量。")]),n._v(" "),t("p",[t("strong",[n._v("JS中默认提供iterable的标准（可以使用for of迭代）内建值包括：Array、String、Generator、Collection")])]),n._v(" "),t("p",[n._v("Symbol的主要意义是创建一个类似字符串的不会与其他任何值相冲突的值。")]),n._v(" "),t("p",[n._v("单例模式的模块：")]),n._v(" "),t("pre",[t("code",[n._v("const INSTANCE = Symbol('instance')\nfunction HappyFace() {\n    if (HappyFace[INSTANCE]) return HappyFace[INSTANCE]\n    function smile () { ... }\n    return HappyFace[INSTANCE] = { // 函数也是对象\n        smile: smile\n    }\n}\nvar me = HappyFace()\nyou = HappyFace()\nme === you // true")])]),n._v(" "),t("p",[t("strong",[n._v("使用Symbol.for注册全局的Symbol，Symbol.keyFor提取注册符号的描述文本。")]),n._v("Object.getOwnPropertySymbols获取对象的Symbol属性。")])])}]},r=t("Z0/y")(v,o,!1,null,null,null);e.default=r.exports}});